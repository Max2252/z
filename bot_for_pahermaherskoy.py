from aiogram import types, Dispatcher, Bot
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import sqlite3
import random
import time

bot = Bot(token='7365866888:AAE64t-ihg293fqc64n0XonGrapQB-8qPps', parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

conn = sqlite3.connect('pahermaher.db')
conn2 = sqlite3.connect('supportr.db')
conn3 = sqlite3.connect('very_cool_game.db')

cur = conn.cursor()
cur2 = conn2.cursor()
cur3 = conn3.cursor()

cur.execute('CREATE TABLE IF NOT EXISTS zapisi(name TEXT, time TEXT, id INTEGER)')
cur2.execute('CREATE TABLE IF NOT EXISTS support(message TEXT, id INTEGER)')
cur3.execute('CREATE TABLE IF NOT EXISTS cool_game(nomber INTEGER, special_nomber INTEGER, sroc INTEGER)')

@dp.message_handler(commands='start')
async def hello_message(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫. –í—ã –∑–∞—à–ª–∏ –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ pahermahersuy!")
    vibor = types.ReplyKeyboardMarkup(resize_keyboard=True)
    vibor.add("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úèÔ∏è", "–ú–æ–∏ –∑–∞–ø–∏—Å–∏üìã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ÅâÔ∏è", "–ò–≥—Ä–∞üé≤")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=vibor)

class Sostoyaniya_for_game(StatesGroup):
    waiting_for_nomer = State()
    waiting_for_sroc = State()
    waiting_for_back_nomer = State()



@dp.message_handler(text='–ò–≥—Ä–∞üé≤')
async def play(message: types.Message, state:FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–¥–∫–æ—Å—Ç–∏ —Ç–≤–æ–µ–π –±–∞–Ω–∫–æ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏! –¢–û–õ–¨–ö–û —É 0,000000000000000001% –±—É–¥–µ—Ç —Ä–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞!üò±üò±üò± ")
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ—ë –∫–∞—Ä—Ç—ã:")
    await Sostoyaniya_for_game.waiting_for_nomer.set()

async def sroc(message: types.Message, state:FSMContext):
    await state.update_data(nomer=message.text)
    nomer_carti = message.text
    # cur3.execute("INSERT INTO cool_game (nomber) VALUES (?)", (nomer_carti,))
    # conn3.commit()
    await message.answer("–í–æ—É! –î–∞ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Å–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!")
    await message.answer("–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–π —Å—Ä–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ. –í–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞:")
    await Sostoyaniya_for_game.waiting_for_sroc.set()

async def back_nomer(message: types.Message, state:FSMContext):
    await state.update_data(sroc_card=message.text)
    croc = message.text
    # cur3.execute("INSERT INTO cool_game (sroc) VALUES (?)", (croc,))
    # conn3.commit()
    await message.answer("–ù–µ–º–æ–∂–µ—Ç –±—ã—Ç—å... –£ –Ω–∞—Å —Ç—É—Ç, –ø–æ—Ö–æ–∂–µ, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å... –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–µ-—á—Ç–æ...")
    await message.answer("–°–∫–∏–Ω—å 3 —Ü–∏—Ñ—Ä—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç—ã:")
    await Sostoyaniya_for_game.waiting_for_back_nomer.set()

async def win(message: types.Message, state:FSMContext):
    await state.update_data(zadi_nomer=message.text)
    data = await state.get_data()
    yooooou = message.text
    nomber_take = data.get("nomer")
    sroc_take = data.get("sroc_card")
    cur3.execute("INSERT INTO cool_game (special_nomber, sroc, nomber) VALUES (?, ?, ?)", (yooooou, sroc_take, nomber_take,))
    conn3.commit()
    await message.answer("–≠–¢–û 100% –ü–û–ë–ï–î–ò–¢–ï–õ–¨! –ú–´ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –¢–ï–ë–Ø!!!ü•≥ü•≥ü•≥ü§Æü•≥ü•≥ –¢–´ –ü–ï–†–í–´–ô –¢–û–¢, –ö–¢–û –í–´–ò–ì–†–ê–õ –£ –ù–ê–° –ò –î–ê–õ –ù–ê–ú –°–í–û–Æ –ö–ê–†–¢–£!ü•≥")
    await state.finish()
    return

def register_command3(dp:Dispatcher):
    dp.register_message_handler(play, text="–ò–≥—Ä–∞üé≤", state="*")
    dp.register_message_handler(sroc, state=Sostoyaniya_for_game.waiting_for_nomer)
    dp.register_message_handler(back_nomer, state=Sostoyaniya_for_game.waiting_for_sroc)
    dp.register_message_handler(win, state=Sostoyaniya_for_game.waiting_for_back_nomer)

register_command3(dp)


class Sostoyaniya2(StatesGroup):
    waiting_for_question = State()

@dp.message_handler(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ÅâÔ∏è') 
async def support(message:types.Message, state:FSMContext):
    await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å: ")
    await Sostoyaniya2.waiting_for_question.set()


async def end(message:types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    support_of_user = message.text
    user_id_for_support = message.from_user.id
    cur2.execute("INSERT INTO support (message, id) VALUES (?, ?)", (support_of_user, user_id_for_support))
    conn2.commit()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ú—ã –ø–æ–º–æ–∂–µ–º, –∫–∞–∫ —Ç–æ–∫–∞ —Å–º–æ–∂–µ–º)")
    await state.finish()
    return

def register_command2(dp:Dispatcher):
    dp.register_message_handler(support, text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ÅâÔ∏è", state="*")
    dp.register_message_handler(end, state=Sostoyaniya2.waiting_for_question)

register_command2(dp)

class Sostoyaniya(StatesGroup):
    waiting_for_date_and_time = State()
    waiting_for_name = State()


async def zapis(message:types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å.")
    file = open(f"{message.chat.id}.txt", "w")
    file.close()
    
    await message.answer_photo(types.InputFile("Screenshot_1.jpg"), caption="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
    await Sostoyaniya.waiting_for_date_and_time.set()

async def name(message:types.Message, state: FSMContext):
    await state.update_data(data_and_time=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è.")
    await Sostoyaniya.waiting_for_name.set()

async def end(message:types.Message, state: FSMContext):
    user_name = message.text
    user_id = message.from_user.id
    
    data = await state.get_data()
    file = open(f"{message.chat.id}.txt", "a")
    data_and_time = data.get("data_and_time")

    cur.execute("INSERT INTO zapisi (name, time, id) VALUES (?, ?, ?)", (user_name,data_and_time, user_id))
    conn.commit()
    
    await message.answer(f"–í—ã –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã–π, –∂–¥—ë–º —á–µ–ª–æ–≤–µ–∫–∞ —Å –∏–º–µ–Ω–∏–º {user_name} –≤ {data.get('data_and_time')}")
    await state.finish()
    return

def register_command(dp:Dispatcher):
    dp.register_message_handler(zapis, text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úèÔ∏è", state="*")
    dp.register_message_handler(name, state=Sostoyaniya.waiting_for_date_and_time)
    dp.register_message_handler(end, state=Sostoyaniya.waiting_for_name)

register_command(dp)

@dp.message_handler(text='–ú–æ–∏ –∑–∞–ø–∏—Å–∏üìã')    
async def hello_message(message: types.Message, state: FSMContext):
    cur.execute('SELECT name, time FROM zapisi WHERE id = ?', (message.from_user.id,))
    abc = cur.fetchall()

    if not abc:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return
    
    text = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
    for name, time_ in abc:
        text += f"{time_} - {name}\n"
    await message.answer(f"{text}")


        

conn.commit()

executor.start_polling(dp, skip_updates=True)